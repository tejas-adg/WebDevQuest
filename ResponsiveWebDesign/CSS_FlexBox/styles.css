/*
By default, the content-box model is used.
With this model, when an element has a specific width, that width is calculated based only on the element's content.
Padding and border values get added to the total width, so the element grows to accommodate these values.

The border-box sizing model does the opposite of content-box.
The total width of the element, including padding and border, will be the explicit width set.
The content of the element will shrink to make room for the padding and border.
*/
* {
	box-sizing: border-box;
}

body {
	margin: 0;
	font-family: sans-serif;
	background: #f5f6f7;
}

.header {
	text-align: center;
	text-transform: uppercase;
	padding: 32px;
	background-color: #0a0a23;
	color: #fff;
	border-bottom: 4px solid #fdb347;
}

/*
Flexbox is a one-dimensional CSS layout that can control the way items are spaced out and aligned within a container.

Flexbox has a main and cross axis. The main axis is defined by the flex-direction property, which has four possible values:

row (default): horizontal axis with flex items from left to right
row-reverse: horizontal axis with flex items from right to left
column: vertical axis with flex items from top to bottom
column-reverse: vertical axis with flex items from bottom to top

Note: The axes and directions will be different depending on the text direction. The values shown are for a left-to-right text direction.

By default, flex items will try to fit on one line. You can change that and allow the items to wrap as needed with the flex-wrap property.
*/

/*
To use Flexbox, give an element a `display` property of `flex`. This will make the element a flex container.
Any direct children of a flex container are called flex items.
*/
.gallery {
	display: flex;
	flex-direction: row;

	/* The flex-wrap property determines how your flex items behave when the flex container is too small.
	Setting it to wrap will allow the items to wrap to the next row or column.
	nowrap (default) will prevent your items from wrapping and shrink them if needed. */
	flex-wrap: wrap;

	/* The justify-content property determines how the items inside a flex container
	are positioned along the main axis, affecting their position and the space around them. */
	justify-content: center;

	/* The align-items property determines how the items inside a flex container
	are positioned along the cross axis and the available space in the container.
	In this case, with your flex-direction set to row, your cross axis would be vertical. */
	align-items: center;

	/* The gap CSS shorthand property sets the gaps, also known as gutters, between rows and columns.
	The gap property and its row-gap and column-gap sub-properties provide this functionality for flex, grid, and multi-column layout.
	You apply the property to the container element. */
	gap: 16px;
	max-width: 1400px;
	margin: 0 auto;
	padding: 20px 10px;
}

/* When images have different aspect ratios, rather than setting each image's aspect ratio individually,
you can use the `object-fit` property to determine how images should behave.

Setting your `.gallery img` selector's `object-fit` property to `cover`
will tell the image to fill the `img` container while maintaining aspect ratio, resulting in cropping to fit. */
.gallery img {
	width: 100%;
	max-width: 350px;
	height: 300px;
	object-fit: cover;
	border-radius: 10px;
}

/* The ::after pseudo-element creates an element that is the last child of the selected element.
You can use it to add an empty element after the last image in the gallery. */
.gallery::after {
	content: "";
	width: 350px;
}
